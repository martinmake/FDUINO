# vim: filetype=make

NAME_EXAMPLE:=$(shell echo $(realpath .) | sed -E 's/.*\/([^\/]*\/[^\/]*)$$/\1/')

include $(MAKEFILE).config
include Makefile.config

LIBS+=util
DEFS+=F_CPU=$(F_CPU) TIO_BAUD=$(TIO_BAUD)

LIBS:=$(addprefix -l,$(LIBS))
DEFS:=$(addprefix -D,$(DEFS))

SRCS_C  :=$(shell find $(DIR_SRC) -name '*.c'  )
SRCS_CXX:=$(shell find $(DIR_SRC) -name '*.cpp')
SRCS_ASM:=$(shell find $(DIR_SRC) -name '*.S'  )

OBJS_C  :=$(patsubst $(DIR_SRC)/%.c,  $(DIR_OBJ)/%.o,$(SRCS_C)  )
OBJS_CXX:=$(patsubst $(DIR_SRC)/%.cpp,$(DIR_OBJ)/%.o,$(SRCS_CXX))
OBJS_ASM:=$(patsubst $(DIR_SRC)/%.S,  $(DIR_OBJ)/%.o,$(SRCS_ASM))
OBJS    :=$(OBJS_C) $(OBJS_CXX) $(OBJS_ASM)

DIRS_INC+=/usr/avr/include
INC:=$(addprefix -I,$(DIRS_INC) $(DIR_INC_LIB))

FLAGS_CC :=$(WARNING) $(OPTIMIZATION) -mmcu=$(MCU) $(INC) $(DEFS) -std=c99
FLAGS_CXX:=$(WARNING) $(OPTIMIZATION) -mmcu=$(MCU) $(INC) $(DEFS) -std=c++14 -fno-rtti
FLAGS_ASM:=$(WARNING) $(OPTIMIZATION) -mmcu=$(MCU) $(INC) $(DEFS)
FLAGS_LD :=$(WARNING) $(OPTIMIZATION) -mmcu=$(MCU) -L$(DIR_LIB_LIB)/$(MCU) -Wl,--gc-sections

.SECONDARY: $(OBJS)

.PHONY: all
all: $(ELF)
	@echo "> BULDING $(NAME_EXAMPLE)"
	$(OBJCOPY) -j .data -j .text -O ihex   $(ELF)   $(HEX)
	$(OBJCOPY) -j .data -j .text -O binary $(ELF)   $(BIN)
	$(OBJDUMP) -DCzge                      $(ELF) > $(ASM)
	$(SIZE) $(HEX) | sed -e 's/^/* /'
	@echo "< BULDING $(NAME_EXAMPLE) DONE"

$(ELF): $(OBJS)
	@echo "> LINKING $(NAME_EXAMPLE)"
	$(LD) $(FLAGS_LD) $^ $(LIBS) -o $@
	@echo "< LINKING $(NAME_EXAMPLE) DONE"

$(DIR_OBJ)/%.o: $(DIR_SRC)/%.c
	@echo "> COMPILING $<"
	$(CC)   $(FLAGS_CC) -c $< -o $@
	@echo "< COMPILING $< DONE"
$(DIR_OBJ)/%.o: $(DIR_SRC)/%.cpp
	@echo "> COMPILING $<"
	$(CXX)  $(FLAGS_CXX) -c $< -o $@
	@echo "< COMPILING $< DONE"
$(DIR_OBJ)/%.o: $(DIR_SRC)/%.S
	@echo "> COMPILING $<"
	$(ASMC) $(FLAGS_ASM) -c $< -o $@
	@echo "< COMPILING $< DONE"

$(DIR_DEP)/%.d: $(DIR_SRC)/%.c
	@echo "> BUILDING DEPENDENCIES $<"
	$(CC)   $(INC) -MM $< -MT '$(patsubst $(DIR_DEP)/%.d,$(DIR_OBJ)/%.o,$@)' > $@
	@echo "< BUILDING DEPENDENCIES $< DONE"
$(DIR_DEP)/%.d: $(DIR_SRC)/%.cpp
	@echo "> BUILDING DEPENDENCIES $<"
	$(CXX)  $(INC) -MM $< -MT '$(patsubst $(DIR_DEP)/%.d,$(DIR_OBJ)/%.o,$@)' > $@
	@echo "< BUILDING DEPENDENCIES $< DONE"
$(DIR_DEP)/%.d: $(DIR_SRC)/%.S
	@echo "> BUILDING DEPENDENCIES $<"
	$(ASMC) $(INC) -MM $< -MT '$(patsubst $(DIR_DEP)/%.d,$(DIR_OBJ)/%.o,$@)' > $@
	@echo "< BUILDING DEPENDENCIES $< DONE"

.PHONY: flash
flash:
	sudo avrdude -v -p $(MCU) -c $(PROG) -P $(PORT) -U flash:w:$(HEX):i

.PHONY: serial
serial:
	sudo tio -b $(TIO_BAUD) -d 8 -s 1 -e -mINLCRNL $(PORT)

.PHONY: bear
bear:
	@better-bear $(DIR_SRC) $(DIRS_INC)

.PHONY: clean
clean:
	@echo "> CLEANING $(NAME_EXAMPLE)"
	-rm -vfr ./$(DIR_OBJ)/* ./$(DIR_DEP)/* $(ELF) $(HEX) $(BIN) $(ASM) | sed -e 's/^/* /'
	@echo "< CLEANING $(NAME_EXAMPLE) DONE"

ifeq ($(NODEP),)
-include $(patsubst $(DIR_SRC)/%.c,  $(DIR_DEP)/%.d,$(SRCS_C)  )
-include $(patsubst $(DIR_SRC)/%.cpp,$(DIR_DEP)/%.d,$(SRCS_CXX))
-include $(patsubst $(DIR_SRC)/%.S,  $(DIR_DEP)/%.d,$(SRCS_ASM))
endif
